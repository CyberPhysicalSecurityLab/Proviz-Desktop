/*
This code was generated by using Proviz Software.
All rights reserved.
Date ${date}
*/
#include <ArduinoJson.h>
<#if board.connectionType == "INTERNET">
#include <ProvizWiFi.h>
#include <avr/wdt.h>
</#if>


<#list board.sensors as sensor>
<#list sensor.libraries as library>
<#if library.environment == "ARDUINO">
<#list library.names as name>
#include <${name}>
</#list>
</#if>
</#list>
</#list>

<#if board.connectionType == "BLUETOOTH_CLASSIC">
#define BLUETOOTHCONNECTION;
<#elseif board.connectionType == "INTERNET">
#define WiFiCONNECTION;
WiFi wifi("${AP_NAME}","${AP_PASS}","${SERVER_IP}","${PORT_NUMBER}",5000);
bool canDispenseJsonSensorValue = false;
<#elseif board.connectionType == "SERIAL">
#define SERIALCONNECTION;
</#if>

<#list board.sensors as sensor>
${sensor.variableTypeName} sensor_${sensor.uniqueIdWithUnderScore};
</#list>



void writeToServer(String message)
{

#ifdef BLUETOOTHCONNECTION
    Serial.println(message);
#endif

#ifdef SERIALCONNECTION
    Serial.println(message);
#endif

#ifdef WiFiCONNECTION
    wifi.sendDataToServerinNormalMode(message);
#endif
}



<#list board.sensors as sensor>
void func_${sensor.uniqueIdWithUnderScore} (StaticJsonBuffer<600> jsonBuffer, JsonArray& obj)
{
<#list sensor.codes as code>
   <#list code.functions as function>
     <#if function.name == "loop">
         ${function.innerCode};
          </#if>
  </#list>
  </#list>

}
</#list>
<#if board.connectionType == "INTERNET" >
void rebootProcedure()
{
  canDispenseJsonSensorValue = false;
    wifi.switchToTransparentMode();
    wifi.createTransparentModeTunnel();
    wifi.informServerForReset();
    wifi.setProgrammed(true);
    triggerWDTReset();
}

void triggerWDTReset()
{
    wifi.switchToTransparentMode();
    wdt_enable(WDTO_30MS);
}
  </#if>

void sendBoardPacket()
{
StaticJsonBuffer<600> jsonBuffer;

JsonObject& obj= jsonBuffer.createObject();
obj["deviceId"] = "${board.uniqueId}";
obj["deviceName"] = "${board.userFriendlyName}";
JsonArray& data = obj.createNestedArray("sensors");

<#list board.sensors as sensor>
<#list sensor.codes as code>
   <#list code.functions as function>
     <#if function.name == "self">
         func_${sensor.uniqueIdWithUnderScore}(jsonBuffer,data);
          </#if>
  </#list>
  </#list>
   </#list>
String jsonstr = "";
obj.printTo(jsonstr);
Serial2.println(jsonstr);
writeToServer(jsonstr);
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600);
  <#if board.connectionType == "INTERNET" >
    if(wifi.isProvizDataAvailable() == false)
        {
        wifi.loadDefaultProvizData("ce5371b8_5be2_45e8_8836_86f43637cac7");
         Serial2.println("Proviz Data Available Degildi yukledim.");

        }

        if(wifi.isProgrammed())
        {
          Serial2.println("isProgrammed = true");
          wifi.closeTransparentModeTunnel();
          Serial2.println("Transparent Mode is closed");
          wifi.switchToNormalMode();
          Serial2.println("Switched To Normal Mode");

          while(!wifi.checkWifiShield())
          {
           delay(500);
          }
          Serial2.println("Wifi Shield Check PASS");

           if(wifi.connect2Server()){
           Serial2.println("Connected To Server");

          if(wifi.isServerWantsToProgram())
          {
            Serial2.println("Server Want to program");

            rebootProcedure();

            triggerWDTReset();
          }
          else
          {
                  Serial2.println("Server do not want to program");
            canDispenseJsonSensorValue = true;
            Serial2.println("canDispenseJsonSensorValue = true");
            wifi.setProgrammed(false);
            Serial2.println("wifi.setProgrammed(false)");
          }
           }
             else{
                     Serial2.println("Server connection fail");

            wifi.setProgrammed(false);
            triggerWDTReset();
           }
        }
        else
        {
                Serial2.println("isProgrammed Fail");

         wifi.reset();
                 Serial2.println("wifi reset");

         if(wifi.connect2AP())
         {
                 Serial2.println("AP connection OK");

         if(wifi.connect2Server())
         {
                 Serial2.println("Server connected");

         canDispenseJsonSensorValue = true;
         }
         else
         {
                 Serial2.println("Server Connection Fail");

               triggerWDTReset();
         }

         }
         else
         {
                 Serial2.println("AP connection fail");

          triggerWDTReset();
         }


        }
  </#if>
}

void loop() {
  // put your main code here, to run repeatedly:
  <#if board.connectionType == "INTERNET">
   if(canDispenseJsonSensorValue)
   {
     if (wifi.isReceived("reboot"))
     {
       Serial2.println("Reboot arrived");

       rebootProcedure();
     }
     sendBoardPacket();
   }
   <#else>
   sendBoardPacket();
  </#if>

}